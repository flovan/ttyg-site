// HELPER UTILITIES
//

/** 
 * Converts a pixel value to em
 *
 * @param {Number} $target - a pixel value
 * @param {Number} $context (16px) - a pixel value
 *
 * @example
 * em(14);
 * // 0.875em
 *
 * @example
 * em(14, 12);
 * // 1.16667em
 *
 * @return {Number}
 */

@function ttyg-em ($target, $context: map-get($ttyg-defaults, font-size)) {
	$context: ttyg-strip($context);
	$target: ttyg-strip($target);
	
	@return ($target/$context)*1em;
}

/** 
 * Removes a value from a list
 *
 * @param {List} $list - the target list
 * @param {Any} $value - the value to remove
 * @param {Boolean} $recursive - remove in nested lists as well
 *
 * @example
 * l-remove((one, two), two)
 * // (one)
 *
 * @return {List}
 */

@function ttyg-l-remove ($list, $value, $recursive: false) {
	$result: ();

	@for $i from 1 through length($list) {
		@if type-of(nth($list, $i)) == list and $recursive {
			$result: append($result, remove(nth($list, $i), $value, $recursive));
		} @else if nth($list, $i) != $value {
			$result: append($result, nth($list, $i));
		}
	}

	@return $result;
}

/** 
 * Removea value at a certain index from a list
 *
 * @param {List} $list - the target list
 * @param {Number} $index - the index of the value
 *
 * @example
 * l-remove-nth((one, two, three), 2)
 * // (one, three)
 *
 * @return {List}
 */

@function ttyg-l-remove-nth ($list, $index) {
	$result: null;
				
	@if type-of($index) != number {
		@warn "$index: #{quote($index)} is not a number for `remove-nth`.";
	}

	@else if $index == 0 {
		@warn "List index 0 must be a non-zero integer for `remove-nth`.";
	}

	@else if abs($index) > length($list) {
		@warn "List index is #{$index} but list is only #{length($list)} item long for `remove-nth`.";
	}

	@else {
		$result: ();
		$index: if($index < 0, length($list) + $index + 1, $index);  

		@for $i from 1 through length($list) {
			@if $i != $index {
				$result: append($result, nth($list, $i));
			}
		}
	}
				
	@return $result;
}

/** 
 * Make a subset from a list
 *
 * @param {List} $list - the target list
 * @param {Number} $var - the start index
 * @param {Number} $var (length) - number of values to include
 *
 * @example
 * l-slice((one, two, three, four), 3)
 * // (three, four)
 *
 * @example
 * l-slice((one, two, three, four), 2, 3)
 * // (two, three)
 *
 * @return {List}
 */

@function ttyg-l-slice ($list, $start: 1, $end: length($list)) {
	$result: null;
							
	@if type-of($start) != number or type-of($end) != number {
		@warn "Either $start or $end are not a number for `slice`.";
	} @else if $start > $end {
		@warn "The start index has to be lesser than or equals to the end index for `slice`.";
	} @else if $start < 1 or $end < 1 {
		@warn "List indexes must be non-zero integers for `slice`.";
	} @else if $start > length($list) {
		@warn "List index is #{$start} but list is only #{length($list)} item long for `slice`.";
	} @else if $end > length($list) {
		@warn "List index is #{$end} but list is only #{length($list)} item long for `slice`.";
	} @else {
		$result: ();
								
		@for $i from $start through $end {
			$result: append($result, nth($list, $i));
		}
	}

	@return $result;
}

/** 
 * Flatten a multidimensional List
 *
 * @param {List} $list - the target list
 *
 * @example
 * l-flatten((one, two, (three-a, three-b), four))
 * // (one, two, three-a, three-b, four)
 *
 * @return {List}
 */

@function ttyg-l-flatten ($list) {
	$result: ();

	@each $item in $list {
		@if length($item) > 1 {
			$flatten: ttyg-l-flatten($item);
			
			@each $i in $flatten {
				$result: append($result, $i, list-separator($list));
			}
		}

		@else {
			$result: append($result, $item, list-separator($list));
		}
	}

	@return $result;
}

/** 
 * Removes the unit of a Number
 *
 * @param {Number} $number - the target Number
 *
 * @example
 * strip(12px)
 * // 12
 *
 * @return {Number}
 */

@function ttyg-strip ($number) {
	@return $number / ($number * 0 + 1);
}

/** 
 * Calculate a % width for an amount of columns
 *
 * @param {Number} $columns - amount of columns
 * @param {Number} $context (12) - context total of columns
 *
 * @example
 * col-width(6)
 * // 47.5% (subtracted with gutter)
 *
 * @return {Number}
 */

@function ttyg-col-width ($columns, $context: ttyg-get(context)) {
	$perc: (100 / $context * $columns) * 1%;
	@return ($perc - (ttyg-get(gutter) - (ttyg-get(gutter)/($context / $columns))));
}

/** 
 * Unwraps a list until its value is a Number
 *
 * @param {List} $list - the target list
 *
 * @example
 * reduce-to-number((1))
 * // 1
 *
 * @return {Number}
 */

@function ttyg-reduce-to-number ($list) {
	@while type-of($list) != number {
		$list: nth($list, 1);
	}
	@return $list;
}
