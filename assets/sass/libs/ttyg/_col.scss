// COLUMN
//

/**
 * Interpret instructions and render a column
 *
 * @param {List} $instructions - instructions
 *
 * @example
 * col(6 to 1000px)
 */

@mixin col($instructions) {
	// Make a copy of the ttyg settings:
	$g: map-merge((), $ttyg-defaults);

	// Prepare a breakpoint holder for later use ("then")
	$bp: null;

	// Print out the instructions as a comment
	/* instructions: #{$instructions} */

	// Print common CSS
	@extend %ttyg-common;

	// Flatten the instructions
	$instructions: l-flatten($instructions);

	// Get length and type of instructions, and prepare cols
	$instr-length: length($instructions);
	$instr-type: type-of($instructions);
	$cols: map-get($g, context);

	// Check if this column should break or not
	$isBreak: index($instructions, 'no-break') == null;
	@if not $isBreak {
		$instructions: l-remove($instructions, no-break);
		$instr-length: length($instructions);
		$instr-type: type-of($instructions);
	}

	// Analyse the instructions
	$ofIndex: index($instructions, of);
	$ofContext: map-get($ttyg-defaults, context);
	$hasOf: $ofIndex != null and $ofIndex != false;

	$fromIndex: index($instructions, from);
	$hasFrom: $fromIndex != null and $fromIndex != false;

	$toIndex: index($instructions, to);
	$hasTo: $toIndex != null and $toIndex != false;

	$thenIndex: index($instructions, then);
	$hasThen: $thenIndex != null and $thenIndex != false;

	$edgeLoc: index($instructions, edge);
	$isEdge: $edgeLoc != null and $edgeLoc != false;

	$centeredLoc: index($instructions, centered);
	$isCentered: $centeredLoc != null and $centeredLoc != false;

	$offsetLoc: index($instructions, offset);
	$isOffset: $offsetLoc != null and $offsetLoc != false;

	$pushLoc: index($instructions, push);
	$pushAmount: 0;
	$isPush: $pushLoc != null and $pushLoc != false;

	$pullLoc: index($instructions, pull);
	$pullAmount: 0;
	$isPull: $pullLoc != null and $pullLoc != false;

	// Deal with single or multi-part instructions
	@if $instr-length == 1 and $instr-type == number {
		// If this instructions are a number, this is the
		// number of columns we need
		$cols: strip($instructions);

		// Extend classes
		@extend %ttyg-f-left;
		@extend %ttyg-margin-r;
	} @else {
		// If both "edge" and "centered" are passed in, throw error
		@if $isEdge and $isCentered {
			@error 'A column cannot be "edge" and "centered" at the same time';
		}

		// Take care of "edge" or "centered" behaviour
		@if $isEdge {
			// Remove the "edge" keyword from instructions
			$instructions: l-remove($instructions, edge);
			$instr-length: length($instructions);
			$instr-type: type-of($instructions);

			// Extend classes
			@extend %ttyg-f-right;
		} @else if $isCentered {
			// Remove the "centered" keyword from instructions
			$instructions: l-remove($instructions, centered);
			$instr-length: length($instructions);
			$instr-type: type-of($instructions);

			// Extend classes
			@extend %ttyg-centered;
		} @else {
			// Extend classes
			@extend %ttyg-f-left;
			@extend %ttyg-margin-r;
		}

		// Deal with "offset" columns
		@if $isOffset {
			// Find out how much offset is asked for
			$offsetAmount: nth($instructions, $offsetLoc + 1);

			// Convert amount to column based width if no unit is provided
			@if unit($offsetAmount) == '' {
				$offsetAmount: col-width($offsetAmount);
			}

			// Remove the push amount and keyword from the instructions
			$instructions: l-remove-nth($instructions, $offsetLoc + 1);
			$instructions: l-remove-nth($instructions, $offsetLoc);
			$instr-length: length($instructions);
			$instr-type: type-of($instructions);

			// Print some CSS
			margin-left: $offsetAmount;
		}

		// Deal with "of" contexts
		@if $hasOf {
			// Find out how much push is asked for
			$ofLoc: index($instructions, of);
			$ofBase: nth($instructions, $ofLoc - 1);
			$ofContext: nth($instructions, $ofLoc + 1);

			// Validate the base and context
			@if unit($ofBase) != '' or type-of($ofBase) != number {
				@error 'The "off" keyword requires a unitless, numerical base (eg. 2 of 4).';
			}
			@if unit($ofContext) != '' or type-of($ofContext) != number {
				@warn 'The "off" keyword requires a unitless, numerical context (eg. 2 of 4). Falling back to default "#{map-get($grid, context)}"';
				$ofContext: map-get($g, context);
			}

			// Remove the push amount and keyword from the instructions
			$instructions: l-remove-nth($instructions, $ofLoc + 1);
			$instructions: l-remove-nth($instructions, $ofLoc);
			$instr-length: length($instructions);
			$instr-type: type-of($instructions);

			$g: map-merge($g, (context: $ofContext));
		}

		// If both "push" and "pull" are passed in, throw error
		@if $isPush and $isPull {
			@error 'A column cannot be "push" and "pull" at the same time';
		}

		// Deal with "push" columns
		@if $isPush {
			// Find out how much push is asked for
			$pushLoc: index($instructions, push);
			$pushAmount: nth($instructions, $pushLoc + 1);

			// Remove the push amount and keyword from the instructions
			$instructions: l-remove-nth($instructions, $pushLoc + 1);
			$instructions: l-remove-nth($instructions, $pushLoc);
			$instr-length: length($instructions);
			$instr-type: type-of($instructions);

			// Print some CSS and extend classes
			@extend %ttyg-r-auto;
		}

		// Deal with "pull" columns
		@if $isPull {
			// Find out how much push is asked for
			$pullLoc: index($instructions, pull);
			$pullAmount: nth($instructions, $pullLoc + 1);

			// Remove the push amount and keyword from the instructions
			$instructions: l-remove-nth($instructions, $pullLoc + 1);
			$instructions: l-remove-nth($instructions, $pullLoc);
			$instr-length: length($instructions);
			$instr-type: type-of($instructions);

			// Print some CSS and extend classes
			@extend %ttyg-l-auto;
		}

		// Deal with "from" widths
		@if $hasFrom {
			// Find out what the asked breakpoint is
			$fromLoc: index($instructions, from);
			$fromBreak: nth($instructions, $fromLoc + 1);

			// Validate the base and context
			@if type-of($fromBreak) != number or unit($fromBreak) != px {
				@error 'The "from" keyword requires a numerical pixel breakpoint. Given was "#{$fromBreak}".';
			}

			// Remove the push amount and keyword from the instructions
			$instructions: l-remove-nth($instructions, $fromLoc + 1);
			$instructions: l-remove-nth($instructions, $fromLoc);
			$instr-length: length($instructions);
			$instr-type: type-of($instructions);

			$g: map-merge($g, (breakpoint: $fromBreak));
		}

		// Deal with "to" widths
		@if $hasTo {
			// Find out what the asked maximum breakpoint is
			$toLoc: index($instructions, to);
			$toBreak: nth($instructions, $toLoc + 1);

			// Validate the base and context
			@if type-of($toBreak) != number or unit($toBreak) != px {
				@error 'The "to" keyword requires a numerical pixel breakpoint. Given was "#{$toBreak}".';
			}

			// Remove the push amount and keyword from the instructions
			@if $hasThen {
				$bp: $toBreak;
			}

			$instructions: l-remove-nth($instructions, $toLoc + 1);
			$instructions: l-remove-nth($instructions, $toLoc);
			$instr-length: length($instructions);
			$instr-type: type-of($instructions);

			$g: map-merge($g, (max: $toBreak));
		}

		// Deal with "then" widths
		@if $hasThen {
			// Find out where the "then" is located
			$thenLoc: index($instructions, then);
			$includeInstruction: null;

			// Add a "from" instruction for the next mixin call
			@if $bp != null {
				$includeInstruction: (l-slice($instructions, $thenLoc + 1, $thenLoc + 1), from, $bp, l-slice($instructions, $thenLoc + 2));
			} @else {
				$includeInstruction: (l-slice($instructions, $thenLoc + 1, $thenLoc + 1), from, map-get($g, breakpoint), l-slice($instructions, $thenLoc + 2));
			}

			// Run the mixin again with everything after "then"
			@include col($includeInstruction);

			// Remove keyword from the instructions
			$instructions: l-slice($instructions, 1, $thenLoc - 1);
			$instr-length: length($instructions);
			$instr-type: type-of($instructions);
		}

		// If the instructions now equals a number, this is
		// the number of columns we need
		@if $instr-length != 1 or $instr-type != number {
			$instructions: reduce-to-number($instructions);
		}
	}

	// Get the number of columns;
	$cols: strip($instructions);

	// Deal with "push" columns
	@if $isPush {
		// Find the gutter multiplier
		$gutterMultiplier: ceil($ofContext/$pushAmount - 1);

		// Take care of spanning columns
		@if $ofContext/$cols < $gutterMultiplier {
			$gutterMultiplier: $gutterMultiplier - $ofContext/$cols;
		}

		// Print some CSS
		left: ($gutterMultiplier * map-get($ttyg-defaults, gutter)) + col-width($pushAmount);
	}

	// Deal with "pull" columns
	@if $isPull {
		// Find the gutter multiplier
		$gutterMultiplier: ceil($ofContext/$pullAmount - 1);

		// Take care of spanning columns
		@if $ofContext/$cols < $gutterMultiplier {
			$gutterMultiplier: $gutterMultiplier - $ofContext/$cols;
		}

		right: ($gutterMultiplier * map-get($ttyg-defaults, gutter)) + col-width($pullAmount);
	}

	// Check if we're dealing with breakpoints
	@if $isBreak {
		@if map-has-key($g, max) {
			@media screen and (min-width: em(map-get($g, breakpoint))) and (max-width: em(map-get($g, max))) {
				width: col-width($cols, map-get($g, context));
			}
		} @else {
			@media screen and (min-width: em(map-get($g, breakpoint))) {
				width: col-width($cols, map-get($g, context));
			}
		}
	} @else {
		width: col-width($cols, map-get($g, context));
	}
}
